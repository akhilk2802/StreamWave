// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: proto/stream_processing.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StreamProcessingService_StartTranscoding_FullMethodName = "/stream_processing.StreamProcessingService/StartTranscoding"
	StreamProcessingService_StopProcessing_FullMethodName   = "/stream_processing.StreamProcessingService/StopProcessing"
	StreamProcessingService_ReceiveMetadata_FullMethodName  = "/stream_processing.StreamProcessingService/ReceiveMetadata"
)

// StreamProcessingServiceClient is the client API for StreamProcessingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gRPC service for the Stream Processing Service
type StreamProcessingServiceClient interface {
	StartTranscoding(ctx context.Context, in *TranscodingRequest, opts ...grpc.CallOption) (*TranscodingResponse, error)
	StopProcessing(ctx context.Context, in *ProcessingRequest, opts ...grpc.CallOption) (*ProcessingResponse, error)
	// New RPC method for receiving forwarded metadata
	ReceiveMetadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*MetadataResponse, error)
}

type streamProcessingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamProcessingServiceClient(cc grpc.ClientConnInterface) StreamProcessingServiceClient {
	return &streamProcessingServiceClient{cc}
}

func (c *streamProcessingServiceClient) StartTranscoding(ctx context.Context, in *TranscodingRequest, opts ...grpc.CallOption) (*TranscodingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TranscodingResponse)
	err := c.cc.Invoke(ctx, StreamProcessingService_StartTranscoding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamProcessingServiceClient) StopProcessing(ctx context.Context, in *ProcessingRequest, opts ...grpc.CallOption) (*ProcessingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessingResponse)
	err := c.cc.Invoke(ctx, StreamProcessingService_StopProcessing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamProcessingServiceClient) ReceiveMetadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*MetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetadataResponse)
	err := c.cc.Invoke(ctx, StreamProcessingService_ReceiveMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamProcessingServiceServer is the server API for StreamProcessingService service.
// All implementations must embed UnimplementedStreamProcessingServiceServer
// for forward compatibility.
//
// gRPC service for the Stream Processing Service
type StreamProcessingServiceServer interface {
	StartTranscoding(context.Context, *TranscodingRequest) (*TranscodingResponse, error)
	StopProcessing(context.Context, *ProcessingRequest) (*ProcessingResponse, error)
	// New RPC method for receiving forwarded metadata
	ReceiveMetadata(context.Context, *MetadataRequest) (*MetadataResponse, error)
	mustEmbedUnimplementedStreamProcessingServiceServer()
}

// UnimplementedStreamProcessingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStreamProcessingServiceServer struct{}

func (UnimplementedStreamProcessingServiceServer) StartTranscoding(context.Context, *TranscodingRequest) (*TranscodingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTranscoding not implemented")
}
func (UnimplementedStreamProcessingServiceServer) StopProcessing(context.Context, *ProcessingRequest) (*ProcessingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopProcessing not implemented")
}
func (UnimplementedStreamProcessingServiceServer) ReceiveMetadata(context.Context, *MetadataRequest) (*MetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveMetadata not implemented")
}
func (UnimplementedStreamProcessingServiceServer) mustEmbedUnimplementedStreamProcessingServiceServer() {
}
func (UnimplementedStreamProcessingServiceServer) testEmbeddedByValue() {}

// UnsafeStreamProcessingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamProcessingServiceServer will
// result in compilation errors.
type UnsafeStreamProcessingServiceServer interface {
	mustEmbedUnimplementedStreamProcessingServiceServer()
}

func RegisterStreamProcessingServiceServer(s grpc.ServiceRegistrar, srv StreamProcessingServiceServer) {
	// If the following call pancis, it indicates UnimplementedStreamProcessingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StreamProcessingService_ServiceDesc, srv)
}

func _StreamProcessingService_StartTranscoding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranscodingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamProcessingServiceServer).StartTranscoding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamProcessingService_StartTranscoding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamProcessingServiceServer).StartTranscoding(ctx, req.(*TranscodingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamProcessingService_StopProcessing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamProcessingServiceServer).StopProcessing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamProcessingService_StopProcessing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamProcessingServiceServer).StopProcessing(ctx, req.(*ProcessingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamProcessingService_ReceiveMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamProcessingServiceServer).ReceiveMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamProcessingService_ReceiveMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamProcessingServiceServer).ReceiveMetadata(ctx, req.(*MetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamProcessingService_ServiceDesc is the grpc.ServiceDesc for StreamProcessingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamProcessingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stream_processing.StreamProcessingService",
	HandlerType: (*StreamProcessingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartTranscoding",
			Handler:    _StreamProcessingService_StartTranscoding_Handler,
		},
		{
			MethodName: "StopProcessing",
			Handler:    _StreamProcessingService_StopProcessing_Handler,
		},
		{
			MethodName: "ReceiveMetadata",
			Handler:    _StreamProcessingService_ReceiveMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/stream_processing.proto",
}
